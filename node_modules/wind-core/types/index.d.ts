import Field from './Field';
export declare const defaultOptions: {
    globalAlpha: number;
    lineWidth: number;
    colorScale: string;
    velocityScale: number;
    maxAge: number;
    paths: number;
    frameRate: number;
    useCoordsDraw: boolean;
    gpet: boolean;
};
declare type emptyFunc = (v?: any) => number;
export interface IOptions {
    globalAlpha: number;
    lineWidth: number | emptyFunc;
    colorScale: string | string[] | emptyFunc;
    velocityScale: number | emptyFunc;
    particleAge?: number;
    maxAge: number;
    particleMultiplier?: number;
    paths: number | emptyFunc;
    frameRate: number;
    minVelocity?: number;
    maxVelocity?: number;
    useCoordsDraw?: boolean;
    gpet?: boolean;
}
declare class BaseLayer {
    private ctx;
    private options;
    private field;
    private particles;
    static Field: typeof Field;
    private animationLoop;
    private _then;
    private starting;
    private generated;
    forceStop: boolean;
    constructor(ctx: CanvasRenderingContext2D, options: Partial<IOptions>, field?: Field);
    setOptions(options: Partial<IOptions>): void;
    getOptions(): IOptions;
    updateData(field: Field): void;
    private moveParticles;
    private fadeIn;
    private drawParticles;
    /**
     * 用于绘制像素粒子
     * @param particle
     * @param min
     * @param max
     */
    private drawPixelParticle;
    /**
     * 用于绘制坐标粒子
     * @param particle
     * @param min
     * @param max
     */
    private drawCoordsParticle;
    private prepareParticlePaths;
    private randomize;
    project(...args: any[]): [number, number] | null;
    unproject(...args: any[]): [number, number] | null;
    intersectsCoordinate(coordinates: [number, number]): boolean;
    clearCanvas(): void;
    start(): void;
    stop(): void;
    animate(): void;
    /**
     * 渲染前处理
     */
    prerender(): void;
    /**
     * 开始渲染
     */
    render(): void;
    /**
     * each frame render end
     */
    postrender(): void;
}
export { default as Field } from './Field';
export { default as Vector } from './Vector';
export * from './utils';
export default BaseLayer;
