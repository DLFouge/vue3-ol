import Vector from './Vector';
export interface IField {
    xmin: number;
    ymin: number;
    xmax: number;
    ymax: number;
    deltaX: number;
    deltaY: number;
    cols: number;
    rows: number;
    us: number[];
    vs: number[];
    wrappedX?: boolean;
}
export interface IPosition {
    age?: number;
    x?: number;
    y?: number;
    xt?: number;
    yt?: number;
    m?: number;
}
export default class Field {
    private readonly xmin;
    private readonly xmax;
    private readonly ymin;
    private readonly ymax;
    private readonly cols;
    private readonly rows;
    private readonly us;
    private readonly vs;
    private readonly isContinuous;
    private readonly deltaY;
    private readonly deltaX;
    private readonly wrappedX;
    private readonly isFields;
    grid: (Vector | null)[][];
    range: (number | undefined)[] | undefined;
    private columns;
    private fieldConfig;
    constructor(params: IField);
    buildGrid(): (Vector | null)[][];
    release(): void;
    /**
     * grib data extent
     * 格点数据范围
     */
    extent(): number[];
    /**
     * Bilinear interpolation for Vector
     * 针对向量进行双线性插值
     * https://en.wikipedia.org/wiki/Bilinear_interpolation
     * @param   {Number} x
     * @param   {Number} y
     * @param   {Number[]} g00
     * @param   {Number[]} g10
     * @param   {Number[]} g01
     * @param   {Number[]} g11
     * @returns {Vector}
     */
    private bilinearInterpolateVector;
    /**
     * calculate vector value range
     */
    calculateRange(): (number | undefined)[] | undefined;
    /**
     * 检查 uv是否合法
     * @param x
     * @private
     */
    isValid(x: any): boolean;
    private getWrappedLongitudes;
    contains(lon: number, lat: number): boolean;
    /**
     * 获取经纬度所在的位置索引
     * @param lon
     * @param lat
     */
    getDecimalIndexes(lon: number, lat: number): number[];
    /**
     * Nearest value at lon-lat coordinates
     * 线性插值
     * @param lon
     * @param lat
     */
    valueAt(lon: number, lat: number): Vector | null;
    private interpolateColumn;
    startBatchInterpolate(width: number, height: number, unproject: any): void;
    private batchInterpolate;
    /**
     * 根据像素坐标查找向量
     * @param x
     * @param y
     */
    valueAtPixel(x: number, y: number): Vector | null;
    /**
     * Get interpolated grid value lon-lat coordinates
     * 双线性插值
     * @param lon
     * @param lat
     */
    interpolatedValueAt(lon: number, lat: number): any;
    hasValueAt(lon: number, lat: number): boolean;
    /**
     * 基于向量的双线性插值
     * @param i
     * @param j
     */
    private interpolatePoint;
    /**
     * Check the column index is inside the field,
     * adjusting to min or max when needed
     * @private
     * @param   {Number} ii - index
     * @returns {Number} i - inside the allowed indexes
     */
    private clampColumnIndex;
    /**
     * Check the row index is inside the field,
     * adjusting to min or max when needed
     * @private
     * @param   {Number} jj index
     * @returns {Number} j - inside the allowed indexes
     */
    private clampRowIndex;
    /**
     * from: https://github.com/IHCantabria/Leaflet.CanvasLayer.Field/blob/master/src/Field.js#L252
     * 计算索引位置周围的数据
     * @private
     * @param   {Number} i - decimal index
     * @param   {Number} j - decimal index
     * @returns {Array} [fi, ci, fj, cj]
     */
    private getFourSurroundingIndexes;
    /**
     * from https://github.com/IHCantabria/Leaflet.CanvasLayer.Field/blob/master/src/Field.js#L277
     * Get four surrounding values or null if not available,
     * from 4 integer indexes
     * @private
     * @param   {Number} fi
     * @param   {Number} ci
     * @param   {Number} fj
     * @param   {Number} cj
     * @returns {Array}
     */
    private getFourSurroundingValues;
    /**
     * Value for grid indexes
     * @param   {Number} i - column index (integer)
     * @param   {Number} j - row index (integer)
     * @returns {Vector|Number}
     */
    valueAtIndexes(i: number, j: number): Vector | null;
    /**
     * Lon-Lat for grid indexes
     * @param   {Number} i - column index (integer)
     * @param   {Number} j - row index (integer)
     * @returns {Number[]} [lon, lat]
     */
    lonLatAtIndexes(i: number, j: number): number[];
    /**
     * Longitude for grid-index
     * @param   {Number} i - column index (integer)
     * @returns {Number} longitude at the center of the cell
     */
    private longitudeAtX;
    /**
     * Latitude for grid-index
     * @param   {Number} j - row index (integer)
     * @returns {Number} latitude at the center of the cell
     */
    private latitudeAtY;
    /**
     * 生成粒子位置
     * @param o
     * @param width
     * @param height
     */
    randomize(o?: IPosition, width?: number, height?: number): IPosition;
    /**
     * check is custom field
     */
    checkFields(): boolean;
    private interpolateAtPoint;
    private getValueFormXY;
    private YAtLatitude;
    private XAtLongitude;
    _interpolate(width: number, height: number, unproject: any): void;
}
