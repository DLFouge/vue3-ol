import Field from './Field';
export declare function TypeOf(value: any): string;
/**
 * 判断是否为函数
 * @param value
 * @returns {boolean}
 */
export declare function isFunction(value: any): boolean;
/**
 * 判断是否为对象
 * @param value
 * @returns {boolean}
 */
export declare function isObject(value: any): boolean;
/**
 * is date value
 * @param val
 * @returns {boolean}
 */
export declare function isDate(val: any): boolean;
/**
 * is array buffer
 * @param val
 * @returns {boolean}
 */
export declare function isArrayBuffer(val: any): boolean;
/**
 * 判断是否为合法字符串
 * @param value
 * @returns {boolean}
 */
export declare function isString(value: any): boolean;
/**
 * 判断是否为数字
 * @param value
 * @returns {boolean}
 */
export declare function isNumber(value: any): boolean;
/**
 * check isEmpty object
 * @param object
 * @returns {boolean}
 */
export declare function isEmpty(object: {}): boolean;
/**
 * check is null
 * @param obj
 * @returns {boolean}
 */
export declare function isNull(obj: any): boolean;
/**
 * check is array
 * @param arr
 */
export declare function isArray(arr: any): boolean;
/**
 * assign object
 * @param target
 * @param sources
 */
export declare function assign(target: object, ...sources: any[]): any;
export declare function warnLog(msg: string): void;
/**
 * Get floored division
 * @param a
 * @param n
 * @returns {Number} returns remainder of floored division,
 * i.e., floor(a / n). Useful for consistent modulo of negative numbers.
 * See http://en.wikipedia.org/wiki/Modulo_operation.
 */
export declare function floorMod(a: number, n: number): number;
/**
 * 检查值是否合法
 * @param val
 * @returns {boolean}
 */
export declare function isValide(val: any): boolean;
export interface IGFSItem {
    header: {
        parameterCategory: number | string;
        parameterNumber: number | string;
        dx: number;
        dy: number;
        nx: number;
        ny: number;
        lo1: number;
        lo2: number;
        la1: number;
        la2: number;
        [key: string]: any;
    };
    data: number[];
}
/**
 * format gfs json to vector
 * @param data
 */
export declare function formatData(data: IGFSItem[]): Field | undefined;
/**
 * create canvas
 * @param width
 * @param height
 * @param retina
 * @param Canvas
 * @returns {HTMLCanvasElement}
 */
export declare function createCanvas(width: number, height: number, retina: number, Canvas?: any): HTMLCanvasElement;
/**
 * 移除 dom
 * @param node
 * @returns {removeDomNode}
 */
export declare function removeDomNode(node: HTMLElement | HTMLCanvasElement): HTMLElement | null;
export declare function getColor(string: string): any[] | null;
