import { FrameState } from 'ol/PluggableMap';
import CanvasLayerRenderer from 'ol/renderer/canvas/Layer';
import { Field, IOptions } from 'wind-core';
import { WindLayer } from './index';
declare class Render {
    private executors;
    private renderedTransform_;
    constructor();
    execute(context: CanvasRenderingContext2D, index: number, frameState: FrameState, transform: number[], renderedTransform: number[], opt: Partial<IOptions>, data: any): void;
    setOptions(options: Partial<IOptions>): void;
    setData(field: Field): void;
    private repeatWorld;
    private getPixelFromCoordinateInternal;
    private getCoordinateFromPixel;
    private intersectsCoordinate;
}
export default class WindLayerRender extends CanvasLayerRenderer {
    private pixelTransform;
    private inversePixelTransform;
    private context;
    private containerReused;
    private container;
    oRender: Render;
    constructor(layer: WindLayer);
    useContainer(target: HTMLElement | null, transform: string, opacity: number): void;
    prepareFrame(frameState: FrameState): any;
    renderFrame(frameState: FrameState, target: HTMLDivElement): HTMLCanvasElement | HTMLDivElement;
}
export {};
