import { Layer } from 'ol/layer';
import { FrameState } from 'ol/PluggableMap';
import WindLayerRender from './renderer';
import { IOptions } from 'wind-core';
export { Field } from 'wind-core';
export interface IWindOptions extends IOptions {
    forceRender: boolean;
    windOptions: Partial<IOptions>;
    [key: string]: any;
}
interface Interface {
}
export declare class WindLayer extends Layer implements Interface {
    private field;
    _map: any;
    private options;
    private renderer_;
    constructor(data: any, options: any);
    render(frameState: FrameState, target: HTMLDivElement): HTMLCanvasElement | HTMLDivElement | undefined;
    getRenderer(): WindLayerRender;
    getWrapX(): boolean | undefined;
    hasRenderer(): boolean;
    protected createRenderer(): WindLayerRender;
    private pickWindOptions;
    /**
     * get wind layer data
     */
    getData(): any;
    /**
     * set layer data
     * @param data
     * @returns {WindLayer}
     */
    setData(data: any): this;
    updateParams(options?: Partial<IOptions>): this;
    getParams(): Partial<IOptions>;
    setWindOptions(options: Partial<IOptions>): void;
    getWindOptions(): Partial<IOptions>;
}
