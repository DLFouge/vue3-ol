import {
  Image_default
} from "./chunk-SXHGM3VO.js";
import {
  ext_default
} from "./chunk-32LYPAEZ.js";
import "./chunk-BULJNUPF.js";
import {
  ImageCanvas_default
} from "./chunk-GZT7WK3M.js";
import "./chunk-XAFSPYPF.js";
import "./chunk-OWHWYXAG.js";
import "./chunk-LJGIG2JF.js";
import "./chunk-R7HSF55M.js";
import {
  Polygon_default,
  fromExtent
} from "./chunk-5BXQLDDV.js";
import "./chunk-4MEYLJCU.js";
import "./chunk-B6ZS5XHK.js";
import "./chunk-OIGY3JBW.js";
import "./chunk-HPBH6HWH.js";
import "./chunk-SXHM4DXD.js";
import "./chunk-XDIKTJFU.js";
import "./chunk-HQZSRF55.js";
import "./chunk-22ZMPUOM.js";
import "./chunk-BV5TMHXH.js";
import "./chunk-RDSLTYQF.js";
import "./chunk-J5KXJ44D.js";
import "./chunk-POSIMZXH.js";
import "./chunk-65SWW77D.js";
import "./chunk-IUTEOIRK.js";
import {
  boundingExtent,
  containsExtent,
  getHeight,
  getWidth,
  scaleFromCenter
} from "./chunk-4LIZYYTK.js";
import "./chunk-6G6NVFIA.js";
import "./chunk-2WYEPIST.js";
import "./chunk-QLLZOWC4.js";

// node_modules/ol/source/ImageCanvas.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ImageCanvasSource = function(_super) {
  __extends(ImageCanvasSource2, _super);
  function ImageCanvasSource2(opt_options) {
    var _this = this;
    var options = opt_options ? opt_options : {};
    var interpolate = options.imageSmoothing !== void 0 ? options.imageSmoothing : true;
    if (options.interpolate !== void 0) {
      interpolate = options.interpolate;
    }
    _this = _super.call(this, {
      attributions: options.attributions,
      interpolate,
      projection: options.projection,
      resolutions: options.resolutions,
      state: options.state
    }) || this;
    _this.canvasFunction_ = options.canvasFunction;
    _this.canvas_ = null;
    _this.renderedRevision_ = 0;
    _this.ratio_ = options.ratio !== void 0 ? options.ratio : 1.5;
    return _this;
  }
  ImageCanvasSource2.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {
    resolution = this.findNearestResolution(resolution);
    var canvas = this.canvas_;
    if (canvas && this.renderedRevision_ == this.getRevision() && canvas.getResolution() == resolution && canvas.getPixelRatio() == pixelRatio && containsExtent(canvas.getExtent(), extent)) {
      return canvas;
    }
    extent = extent.slice();
    scaleFromCenter(extent, this.ratio_);
    var width = getWidth(extent) / resolution;
    var height = getHeight(extent) / resolution;
    var size = [width * pixelRatio, height * pixelRatio];
    var canvasElement = this.canvasFunction_.call(this, extent, resolution, pixelRatio, size, projection);
    if (canvasElement) {
      canvas = new ImageCanvas_default(extent, resolution, pixelRatio, canvasElement);
    }
    this.canvas_ = canvas;
    this.renderedRevision_ = this.getRevision();
    return canvas;
  };
  return ImageCanvasSource2;
}(Image_default);
var ImageCanvas_default2 = ImageCanvasSource;

// node_modules/ol-ext/source/GeoImage.js
var ol_source_GeoImage = function(opt_options) {
  var options = {
    attributions: opt_options.attributions,
    logo: opt_options.logo,
    projection: opt_options.projection
  };
  this._image = opt_options.image ? opt_options.image : new Image();
  this._image.crossOrigin = opt_options.crossOrigin;
  var self = this;
  this._image.onload = function() {
    self.setCrop(self.crop);
    self.changed();
  };
  if (!opt_options.image)
    this._image.src = opt_options.url;
  options.canvasFunction = this.calculateImage;
  ImageCanvas_default2.call(this, options);
  this.center = opt_options.imageCenter;
  this.setScale(opt_options.imageScale);
  this.rotate = opt_options.imageRotate ? opt_options.imageRotate : 0;
  this.crop = opt_options.imageCrop;
  this.mask = opt_options.imageMask;
  this.setCrop(this.crop);
  this.on("change", function() {
    this.set("extent", this.calculateExtent());
  }.bind(this));
};
ext_default(ol_source_GeoImage, ImageCanvas_default2);
ol_source_GeoImage.prototype.calculateImage = function(extent, resolution, pixelRatio, size) {
  if (!this.center)
    return;
  var canvas = document.createElement("canvas");
  canvas.width = size[0];
  canvas.height = size[1];
  var ctx = canvas.getContext("2d");
  if (!this._imageSize)
    return canvas;
  function tr(xy) {
    return [
      (xy[0] - extent[0]) / (extent[2] - extent[0]) * size[0],
      (xy[1] - extent[3]) / (extent[1] - extent[3]) * size[1]
    ];
  }
  if (this.mask) {
    ctx.beginPath();
    var p = tr(this.mask[0]);
    ctx.moveTo(p[0], p[1]);
    for (var i = 1; i < this.mask.length; i++) {
      p = tr(this.mask[i]);
      ctx.lineTo(p[0], p[1]);
    }
    ctx.clip();
  }
  var pixel = tr(this.center);
  var dx = (this._image.naturalWidth / 2 - this.crop[0]) * this.scale[0] / resolution * pixelRatio;
  var dy = (this._image.naturalHeight / 2 - this.crop[1]) * this.scale[1] / resolution * pixelRatio;
  var sx = this._imageSize[0] * this.scale[0] / resolution * pixelRatio;
  var sy = this._imageSize[1] * this.scale[1] / resolution * pixelRatio;
  ctx.translate(pixel[0], pixel[1]);
  if (this.rotate)
    ctx.rotate(this.rotate);
  ctx.drawImage(this._image, this.crop[0], this.crop[1], this._imageSize[0], this._imageSize[1], -dx, -dy, sx, sy);
  return canvas;
};
ol_source_GeoImage.prototype.getCenter = function() {
  return this.center;
};
ol_source_GeoImage.prototype.setCenter = function(center) {
  this.center = center;
  this.changed();
};
ol_source_GeoImage.prototype.getScale = function() {
  return this.scale;
};
ol_source_GeoImage.prototype.setScale = function(scale) {
  switch (typeof scale) {
    case "number":
      scale = [scale, scale];
      break;
    case "object":
      if (scale.length != 2)
        return;
      break;
    default:
      return;
  }
  this.scale = scale;
  this.changed();
};
ol_source_GeoImage.prototype.getRotation = function() {
  return this.rotate;
};
ol_source_GeoImage.prototype.setRotation = function(angle) {
  this.rotate = angle;
  this.changed();
};
ol_source_GeoImage.prototype.getGeoImage = function() {
  return this._image;
};
ol_source_GeoImage.prototype.getCrop = function() {
  return this.crop;
};
ol_source_GeoImage.prototype.setMask = function(mask) {
  this.mask = mask;
  this.changed();
};
ol_source_GeoImage.prototype.getMask = function() {
  return this.mask;
};
ol_source_GeoImage.prototype.setCrop = function(crop) {
  if (!this._image.naturalWidth) {
    this.crop = crop;
    return;
  }
  if (crop) {
    switch (typeof crop) {
      case "number":
        crop = [crop, crop, this._image.naturalWidth - crop, this._image.naturalHeight - crop];
        break;
      case "object":
        if (crop.length != 4)
          return;
        break;
      default:
        return;
    }
    crop = boundingExtent([[crop[0], crop[1]], [crop[2], crop[3]]]);
    this.crop = [Math.max(0, crop[0]), Math.max(0, crop[1]), Math.min(this._image.naturalWidth, crop[2]), Math.min(this._image.naturalHeight, crop[3])];
  } else
    this.crop = [0, 0, this._image.naturalWidth, this._image.naturalHeight];
  if (this.crop[2] <= this.crop[0])
    this.crop[2] = this.crop[0] + 1;
  if (this.crop[3] <= this.crop[1])
    this.crop[3] = this.crop[1] + 1;
  this._imageSize = [this.crop[2] - this.crop[0], this.crop[3] - this.crop[1]];
  this.changed();
};
ol_source_GeoImage.prototype.getExtent = function(opt_extent) {
  var ext = this.get("extent");
  if (!ext)
    ext = this.calculateExtent();
  if (opt_extent) {
    for (var i = 0; i < opt_extent.length; i++) {
      opt_extent[i] = ext[i];
    }
  }
  return ext;
};
ol_source_GeoImage.prototype.calculateExtent = function(usemask) {
  var polygon;
  if (usemask !== false && this.getMask()) {
    polygon = new Polygon_default([this.getMask()]);
  } else {
    var center = this.getCenter();
    var scale = this.getScale();
    var width = this.getGeoImage().width * scale[0];
    var height = this.getGeoImage().height * scale[1];
    var extent = boundingExtent([
      [center[0] - width / 2, center[1] - height / 2],
      [center[0] + width / 2, center[1] + height / 2]
    ]);
    polygon = fromExtent(extent);
    polygon.rotate(-this.getRotation(), center);
  }
  var ext = polygon.getExtent();
  return ext;
};
var GeoImage_default = ol_source_GeoImage;

// dep:ol-ext_source_GeoImage
var ol_ext_source_GeoImage_default = GeoImage_default;
export {
  ol_ext_source_GeoImage_default as default
};
//# sourceMappingURL=ol-ext_source_GeoImage.js.map
