import {
  createFromCapabilitiesMatrixSet
} from "./chunk-5RAQGQQ5.js";
import {
  appendParams
} from "./chunk-3WBMUVIL.js";
import {
  TileImage_default
} from "./chunk-CAZ5RT5T.js";
import {
  createFromTileUrlFunctions,
  expandUrl
} from "./chunk-XJHEPK5C.js";
import "./chunk-IQVIUSXF.js";
import "./chunk-6TRFZY4T.js";
import "./chunk-XJ3UTWUB.js";
import "./chunk-WPDST7KJ.js";
import "./chunk-N3WJGJXL.js";
import "./chunk-G62ODYDV.js";
import "./chunk-ZVEBQB7G.js";
import "./chunk-KE2T25IH.js";
import "./chunk-TLG5772Y.js";
import "./chunk-BULJNUPF.js";
import "./chunk-XAFSPYPF.js";
import "./chunk-OWHWYXAG.js";
import "./chunk-LJGIG2JF.js";
import "./chunk-R7HSF55M.js";
import "./chunk-TPBBA3TB.js";
import "./chunk-TTYWGBB4.js";
import "./chunk-52GDN6Z5.js";
import "./chunk-OIGY3JBW.js";
import "./chunk-HPBH6HWH.js";
import {
  equivalent,
  get,
  transformExtent
} from "./chunk-SXHM4DXD.js";
import "./chunk-XDIKTJFU.js";
import "./chunk-22ZMPUOM.js";
import "./chunk-BV5TMHXH.js";
import "./chunk-RDSLTYQF.js";
import "./chunk-J5KXJ44D.js";
import "./chunk-POSIMZXH.js";
import {
  assign
} from "./chunk-65SWW77D.js";
import "./chunk-IUTEOIRK.js";
import {
  containsExtent
} from "./chunk-4LIZYYTK.js";
import {
  find,
  findIndex,
  includes
} from "./chunk-6G6NVFIA.js";
import "./chunk-2WYEPIST.js";
import "./chunk-TSM2WJGQ.js";
import "./chunk-QLLZOWC4.js";

// node_modules/ol/source/WMTSRequestEncoding.js
var WMTSRequestEncoding_default = {
  KVP: "KVP",
  REST: "REST"
};

// node_modules/ol/source/WMTS.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var WMTS = function(_super) {
  __extends(WMTS2, _super);
  function WMTS2(options) {
    var _this = this;
    var interpolate = options.imageSmoothing !== void 0 ? options.imageSmoothing : true;
    if (options.interpolate !== void 0) {
      interpolate = options.interpolate;
    }
    var requestEncoding = options.requestEncoding !== void 0 ? options.requestEncoding : WMTSRequestEncoding_default.KVP;
    var tileGrid = options.tileGrid;
    var urls = options.urls;
    if (urls === void 0 && options.url !== void 0) {
      urls = expandUrl(options.url);
    }
    _this = _super.call(this, {
      attributions: options.attributions,
      attributionsCollapsible: options.attributionsCollapsible,
      cacheSize: options.cacheSize,
      crossOrigin: options.crossOrigin,
      interpolate,
      projection: options.projection,
      reprojectionErrorThreshold: options.reprojectionErrorThreshold,
      tileClass: options.tileClass,
      tileGrid,
      tileLoadFunction: options.tileLoadFunction,
      tilePixelRatio: options.tilePixelRatio,
      urls,
      wrapX: options.wrapX !== void 0 ? options.wrapX : false,
      transition: options.transition,
      zDirection: options.zDirection
    }) || this;
    _this.version_ = options.version !== void 0 ? options.version : "1.0.0";
    _this.format_ = options.format !== void 0 ? options.format : "image/jpeg";
    _this.dimensions_ = options.dimensions !== void 0 ? options.dimensions : {};
    _this.layer_ = options.layer;
    _this.matrixSet_ = options.matrixSet;
    _this.style_ = options.style;
    _this.requestEncoding_ = requestEncoding;
    _this.setKey(_this.getKeyForDimensions_());
    if (urls && urls.length > 0) {
      _this.tileUrlFunction = createFromTileUrlFunctions(urls.map(_this.createFromWMTSTemplate.bind(_this)));
    }
    return _this;
  }
  WMTS2.prototype.setUrls = function(urls) {
    this.urls = urls;
    var key = urls.join("\n");
    this.setTileUrlFunction(createFromTileUrlFunctions(urls.map(this.createFromWMTSTemplate.bind(this))), key);
  };
  WMTS2.prototype.getDimensions = function() {
    return this.dimensions_;
  };
  WMTS2.prototype.getFormat = function() {
    return this.format_;
  };
  WMTS2.prototype.getLayer = function() {
    return this.layer_;
  };
  WMTS2.prototype.getMatrixSet = function() {
    return this.matrixSet_;
  };
  WMTS2.prototype.getRequestEncoding = function() {
    return this.requestEncoding_;
  };
  WMTS2.prototype.getStyle = function() {
    return this.style_;
  };
  WMTS2.prototype.getVersion = function() {
    return this.version_;
  };
  WMTS2.prototype.getKeyForDimensions_ = function() {
    var i = 0;
    var res = [];
    for (var key in this.dimensions_) {
      res[i++] = key + "-" + this.dimensions_[key];
    }
    return res.join("/");
  };
  WMTS2.prototype.updateDimensions = function(dimensions) {
    assign(this.dimensions_, dimensions);
    this.setKey(this.getKeyForDimensions_());
  };
  WMTS2.prototype.createFromWMTSTemplate = function(template) {
    var requestEncoding = this.requestEncoding_;
    var context = {
      "layer": this.layer_,
      "style": this.style_,
      "tilematrixset": this.matrixSet_
    };
    if (requestEncoding == WMTSRequestEncoding_default.KVP) {
      assign(context, {
        "Service": "WMTS",
        "Request": "GetTile",
        "Version": this.version_,
        "Format": this.format_
      });
    }
    template = requestEncoding == WMTSRequestEncoding_default.KVP ? appendParams(template, context) : template.replace(/\{(\w+?)\}/g, function(m, p) {
      return p.toLowerCase() in context ? context[p.toLowerCase()] : m;
    });
    var tileGrid = this.tileGrid;
    var dimensions = this.dimensions_;
    return function(tileCoord, pixelRatio, projection) {
      if (!tileCoord) {
        return void 0;
      } else {
        var localContext_1 = {
          "TileMatrix": tileGrid.getMatrixId(tileCoord[0]),
          "TileCol": tileCoord[1],
          "TileRow": tileCoord[2]
        };
        assign(localContext_1, dimensions);
        var url = template;
        if (requestEncoding == WMTSRequestEncoding_default.KVP) {
          url = appendParams(url, localContext_1);
        } else {
          url = url.replace(/\{(\w+?)\}/g, function(m, p) {
            return localContext_1[p];
          });
        }
        return url;
      }
    };
  };
  return WMTS2;
}(TileImage_default);
var WMTS_default = WMTS;
function optionsFromCapabilities(wmtsCap, config) {
  var layers = wmtsCap["Contents"]["Layer"];
  var l = find(layers, function(elt, index, array) {
    return elt["Identifier"] == config["layer"];
  });
  if (l === null) {
    return null;
  }
  var tileMatrixSets = wmtsCap["Contents"]["TileMatrixSet"];
  var idx;
  if (l["TileMatrixSetLink"].length > 1) {
    if ("projection" in config) {
      idx = findIndex(l["TileMatrixSetLink"], function(elt, index, array) {
        var tileMatrixSet = find(tileMatrixSets, function(el) {
          return el["Identifier"] == elt["TileMatrixSet"];
        });
        var supportedCRS = tileMatrixSet["SupportedCRS"];
        var proj1 = get(supportedCRS);
        var proj2 = get(config["projection"]);
        if (proj1 && proj2) {
          return equivalent(proj1, proj2);
        } else {
          return supportedCRS == config["projection"];
        }
      });
    } else {
      idx = findIndex(l["TileMatrixSetLink"], function(elt, index, array) {
        return elt["TileMatrixSet"] == config["matrixSet"];
      });
    }
  } else {
    idx = 0;
  }
  if (idx < 0) {
    idx = 0;
  }
  var matrixSet = l["TileMatrixSetLink"][idx]["TileMatrixSet"];
  var matrixLimits = l["TileMatrixSetLink"][idx]["TileMatrixSetLimits"];
  var format = l["Format"][0];
  if ("format" in config) {
    format = config["format"];
  }
  idx = findIndex(l["Style"], function(elt, index, array) {
    if ("style" in config) {
      return elt["Title"] == config["style"];
    } else {
      return elt["isDefault"];
    }
  });
  if (idx < 0) {
    idx = 0;
  }
  var style = l["Style"][idx]["Identifier"];
  var dimensions = {};
  if ("Dimension" in l) {
    l["Dimension"].forEach(function(elt, index, array) {
      var key = elt["Identifier"];
      var value = elt["Default"];
      if (value === void 0) {
        value = elt["Value"][0];
      }
      dimensions[key] = value;
    });
  }
  var matrixSets = wmtsCap["Contents"]["TileMatrixSet"];
  var matrixSetObj = find(matrixSets, function(elt, index, array) {
    return elt["Identifier"] == matrixSet;
  });
  var projection;
  var code = matrixSetObj["SupportedCRS"];
  if (code) {
    projection = get(code);
  }
  if ("projection" in config) {
    var projConfig = get(config["projection"]);
    if (projConfig) {
      if (!projection || equivalent(projConfig, projection)) {
        projection = projConfig;
      }
    }
  }
  var wrapX = false;
  var switchOriginXY = projection.getAxisOrientation().substr(0, 2) == "ne";
  var matrix = matrixSetObj.TileMatrix[0];
  var selectedMatrixLimit = {
    MinTileCol: 0,
    MinTileRow: 0,
    MaxTileCol: matrix.MatrixWidth - 1,
    MaxTileRow: matrix.MatrixHeight - 1
  };
  if (matrixLimits) {
    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];
    var m = find(matrixSetObj.TileMatrix, function(tileMatrixValue) {
      return tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix || matrixSetObj.Identifier + ":" + tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix;
    });
    if (m) {
      matrix = m;
    }
  }
  var resolution = matrix.ScaleDenominator * 28e-5 / projection.getMetersPerUnit();
  var origin = switchOriginXY ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]] : matrix.TopLeftCorner;
  var tileSpanX = matrix.TileWidth * resolution;
  var tileSpanY = matrix.TileHeight * resolution;
  var matrixSetExtent = matrixSetObj["BoundingBox"];
  var extent = [
    origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,
    origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),
    origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),
    origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow
  ];
  if (matrixSetExtent !== void 0 && !containsExtent(matrixSetExtent, extent)) {
    var wgs84BoundingBox = l["WGS84BoundingBox"];
    var wgs84ProjectionExtent = get("EPSG:4326").getExtent();
    extent = matrixSetExtent;
    if (wgs84BoundingBox) {
      wrapX = wgs84BoundingBox[0] === wgs84ProjectionExtent[0] && wgs84BoundingBox[2] === wgs84ProjectionExtent[2];
    } else {
      var wgs84MatrixSetExtent = transformExtent(matrixSetExtent, matrixSetObj["SupportedCRS"], "EPSG:4326");
      wrapX = wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] && wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];
    }
  }
  var tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj, extent, matrixLimits);
  var urls = [];
  var requestEncoding = config["requestEncoding"];
  requestEncoding = requestEncoding !== void 0 ? requestEncoding : "";
  if ("OperationsMetadata" in wmtsCap && "GetTile" in wmtsCap["OperationsMetadata"]) {
    var gets = wmtsCap["OperationsMetadata"]["GetTile"]["DCP"]["HTTP"]["Get"];
    for (var i = 0, ii = gets.length; i < ii; ++i) {
      if (gets[i]["Constraint"]) {
        var constraint = find(gets[i]["Constraint"], function(element) {
          return element["name"] == "GetEncoding";
        });
        var encodings = constraint["AllowedValues"]["Value"];
        if (requestEncoding === "") {
          requestEncoding = encodings[0];
        }
        if (requestEncoding === WMTSRequestEncoding_default.KVP) {
          if (includes(encodings, WMTSRequestEncoding_default.KVP)) {
            urls.push(gets[i]["href"]);
          }
        } else {
          break;
        }
      } else if (gets[i]["href"]) {
        requestEncoding = WMTSRequestEncoding_default.KVP;
        urls.push(gets[i]["href"]);
      }
    }
  }
  if (urls.length === 0) {
    requestEncoding = WMTSRequestEncoding_default.REST;
    l["ResourceURL"].forEach(function(element) {
      if (element["resourceType"] === "tile") {
        format = element["format"];
        urls.push(element["template"]);
      }
    });
  }
  return {
    urls,
    layer: config["layer"],
    matrixSet,
    format,
    projection,
    requestEncoding,
    tileGrid,
    style,
    dimensions,
    wrapX,
    crossOrigin: config["crossOrigin"]
  };
}

// dep:ol_source_WMTS
var ol_source_WMTS_default = WMTS_default;
export {
  ol_source_WMTS_default as default,
  optionsFromCapabilities
};
//# sourceMappingURL=ol_source_WMTS.js.map
