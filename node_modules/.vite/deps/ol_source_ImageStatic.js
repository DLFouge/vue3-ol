import {
  Image_default as Image_default2,
  defaultImageLoadFunction
} from "./chunk-SXHGM3VO.js";
import {
  Image_default
} from "./chunk-TLG5772Y.js";
import "./chunk-BULJNUPF.js";
import "./chunk-XAFSPYPF.js";
import "./chunk-OWHWYXAG.js";
import {
  IMAGE_SMOOTHING_DISABLED
} from "./chunk-LJGIG2JF.js";
import {
  ImageState_default
} from "./chunk-R7HSF55M.js";
import "./chunk-OIGY3JBW.js";
import {
  createCanvasContext2D
} from "./chunk-HPBH6HWH.js";
import {
  get
} from "./chunk-SXHM4DXD.js";
import "./chunk-XDIKTJFU.js";
import "./chunk-22ZMPUOM.js";
import "./chunk-BV5TMHXH.js";
import "./chunk-RDSLTYQF.js";
import "./chunk-J5KXJ44D.js";
import {
  EventType_default
} from "./chunk-POSIMZXH.js";
import {
  assign
} from "./chunk-65SWW77D.js";
import "./chunk-IUTEOIRK.js";
import {
  getHeight,
  getWidth,
  intersects
} from "./chunk-4LIZYYTK.js";
import "./chunk-6G6NVFIA.js";
import "./chunk-2WYEPIST.js";
import "./chunk-QLLZOWC4.js";

// node_modules/ol/source/ImageStatic.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Static = function(_super) {
  __extends(Static2, _super);
  function Static2(options) {
    var _this = this;
    var crossOrigin = options.crossOrigin !== void 0 ? options.crossOrigin : null;
    var imageLoadFunction = options.imageLoadFunction !== void 0 ? options.imageLoadFunction : defaultImageLoadFunction;
    var interpolate = options.imageSmoothing !== void 0 ? options.imageSmoothing : true;
    if (options.interpolate !== void 0) {
      interpolate = options.interpolate;
    }
    _this = _super.call(this, {
      attributions: options.attributions,
      interpolate,
      projection: get(options.projection)
    }) || this;
    _this.url_ = options.url;
    _this.imageExtent_ = options.imageExtent;
    _this.image_ = new Image_default(_this.imageExtent_, void 0, 1, _this.url_, crossOrigin, imageLoadFunction);
    _this.imageSize_ = options.imageSize ? options.imageSize : null;
    _this.image_.addEventListener(EventType_default.CHANGE, _this.handleImageChange.bind(_this));
    return _this;
  }
  Static2.prototype.getImageExtent = function() {
    return this.imageExtent_;
  };
  Static2.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {
    if (intersects(extent, this.image_.getExtent())) {
      return this.image_;
    }
    return null;
  };
  Static2.prototype.getUrl = function() {
    return this.url_;
  };
  Static2.prototype.handleImageChange = function(evt) {
    if (this.image_.getState() == ImageState_default.LOADED) {
      var imageExtent = this.image_.getExtent();
      var image = this.image_.getImage();
      var imageWidth = void 0, imageHeight = void 0;
      if (this.imageSize_) {
        imageWidth = this.imageSize_[0];
        imageHeight = this.imageSize_[1];
      } else {
        imageWidth = image.width;
        imageHeight = image.height;
      }
      var extentWidth = getWidth(imageExtent);
      var extentHeight = getHeight(imageExtent);
      var xResolution = extentWidth / imageWidth;
      var yResolution = extentHeight / imageHeight;
      var targetWidth = imageWidth;
      var targetHeight = imageHeight;
      if (xResolution > yResolution) {
        targetWidth = Math.round(extentWidth / yResolution);
      } else {
        targetHeight = Math.round(extentHeight / xResolution);
      }
      if (targetWidth !== imageWidth || targetHeight !== imageHeight) {
        var context = createCanvasContext2D(targetWidth, targetHeight);
        if (!this.getInterpolate()) {
          assign(context, IMAGE_SMOOTHING_DISABLED);
        }
        var canvas = context.canvas;
        context.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, canvas.width, canvas.height);
        this.image_.setImage(canvas);
      }
    }
    _super.prototype.handleImageChange.call(this, evt);
  };
  return Static2;
}(Image_default2);
var ImageStatic_default = Static;

// dep:ol_source_ImageStatic
var ol_source_ImageStatic_default = ImageStatic_default;
export {
  ol_source_ImageStatic_default as default
};
//# sourceMappingURL=ol_source_ImageStatic.js.map
