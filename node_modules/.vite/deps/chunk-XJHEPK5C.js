import {
  TileGrid_default
} from "./chunk-IQVIUSXF.js";
import {
  TileCache_default
} from "./chunk-XJ3UTWUB.js";
import {
  getKeyZXY,
  hash,
  withinExtentAndZ
} from "./chunk-N3WJGJXL.js";
import {
  Source_default
} from "./chunk-XAFSPYPF.js";
import {
  DEFAULT_MAX_ZOOM,
  DEFAULT_TILE_SIZE
} from "./chunk-TPBBA3TB.js";
import {
  TileState_default
} from "./chunk-TTYWGBB4.js";
import {
  scale,
  toSize
} from "./chunk-52GDN6Z5.js";
import {
  METERS_PER_UNIT,
  Units_default,
  equivalent,
  get
} from "./chunk-SXHM4DXD.js";
import {
  modulo
} from "./chunk-RDSLTYQF.js";
import {
  Event_default
} from "./chunk-POSIMZXH.js";
import {
  Corner_default,
  containsCoordinate,
  createOrUpdate,
  getCorner,
  getHeight,
  getWidth
} from "./chunk-4LIZYYTK.js";
import {
  abstract,
  assert,
  getUid
} from "./chunk-2WYEPIST.js";

// node_modules/ol/tilegrid.js
function getForProjection(projection) {
  var tileGrid = projection.getDefaultTileGrid();
  if (!tileGrid) {
    tileGrid = createForProjection(projection);
    projection.setDefaultTileGrid(tileGrid);
  }
  return tileGrid;
}
function wrapX(tileGrid, tileCoord, projection) {
  var z = tileCoord[0];
  var center = tileGrid.getTileCoordCenter(tileCoord);
  var projectionExtent = extentFromProjection(projection);
  if (!containsCoordinate(projectionExtent, center)) {
    var worldWidth = getWidth(projectionExtent);
    var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
    center[0] += worldWidth * worldsAway;
    return tileGrid.getTileCoordForCoordAndZ(center, z);
  } else {
    return tileCoord;
  }
}
function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {
  var corner = opt_corner !== void 0 ? opt_corner : Corner_default.TOP_LEFT;
  var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);
  return new TileGrid_default({
    extent,
    origin: getCorner(extent, corner),
    resolutions,
    tileSize: opt_tileSize
  });
}
function createXYZ(opt_options) {
  var xyzOptions = opt_options || {};
  var extent = xyzOptions.extent || get("EPSG:3857").getExtent();
  var gridOptions = {
    extent,
    minZoom: xyzOptions.minZoom,
    tileSize: xyzOptions.tileSize,
    resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)
  };
  return new TileGrid_default(gridOptions);
}
function resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {
  var maxZoom = opt_maxZoom !== void 0 ? opt_maxZoom : DEFAULT_MAX_ZOOM;
  var height = getHeight(extent);
  var width = getWidth(extent);
  var tileSize = toSize(opt_tileSize !== void 0 ? opt_tileSize : DEFAULT_TILE_SIZE);
  var maxResolution = opt_maxResolution > 0 ? opt_maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);
  var length = maxZoom + 1;
  var resolutions = new Array(length);
  for (var z = 0; z < length; ++z) {
    resolutions[z] = maxResolution / Math.pow(2, z);
  }
  return resolutions;
}
function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {
  var extent = extentFromProjection(projection);
  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);
}
function extentFromProjection(projection) {
  projection = get(projection);
  var extent = projection.getExtent();
  if (!extent) {
    var half = 180 * METERS_PER_UNIT[Units_default.DEGREES] / projection.getMetersPerUnit();
    extent = createOrUpdate(-half, -half, half, half);
  }
  return extent;
}

// node_modules/ol/tileurlfunction.js
function createFromTemplate(template, tileGrid) {
  var zRegEx = /\{z\}/g;
  var xRegEx = /\{x\}/g;
  var yRegEx = /\{y\}/g;
  var dashYRegEx = /\{-y\}/g;
  return function(tileCoord, pixelRatio, projection) {
    if (!tileCoord) {
      return void 0;
    } else {
      return template.replace(zRegEx, tileCoord[0].toString()).replace(xRegEx, tileCoord[1].toString()).replace(yRegEx, tileCoord[2].toString()).replace(dashYRegEx, function() {
        var z = tileCoord[0];
        var range = tileGrid.getFullTileRange(z);
        assert(range, 55);
        var y = range.getHeight() - tileCoord[2] - 1;
        return y.toString();
      });
    }
  };
}
function createFromTemplates(templates, tileGrid) {
  var len = templates.length;
  var tileUrlFunctions = new Array(len);
  for (var i = 0; i < len; ++i) {
    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);
  }
  return createFromTileUrlFunctions(tileUrlFunctions);
}
function createFromTileUrlFunctions(tileUrlFunctions) {
  if (tileUrlFunctions.length === 1) {
    return tileUrlFunctions[0];
  }
  return function(tileCoord, pixelRatio, projection) {
    if (!tileCoord) {
      return void 0;
    } else {
      var h = hash(tileCoord);
      var index = modulo(h, tileUrlFunctions.length);
      return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
    }
  };
}
function expandUrl(url) {
  var urls = [];
  var match = /\{([a-z])-([a-z])\}/.exec(url);
  if (match) {
    var startCharCode = match[1].charCodeAt(0);
    var stopCharCode = match[2].charCodeAt(0);
    var charCode = void 0;
    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
      urls.push(url.replace(match[0], String.fromCharCode(charCode)));
    }
    return urls;
  }
  match = /\{(\d+)-(\d+)\}/.exec(url);
  if (match) {
    var stop_1 = parseInt(match[2], 10);
    for (var i = parseInt(match[1], 10); i <= stop_1; i++) {
      urls.push(url.replace(match[0], i.toString()));
    }
    return urls;
  }
  urls.push(url);
  return urls;
}

// node_modules/ol/source/TileEventType.js
var TileEventType_default = {
  TILELOADSTART: "tileloadstart",
  TILELOADEND: "tileloadend",
  TILELOADERROR: "tileloaderror"
};

// node_modules/ol/source/Tile.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TileSource = function(_super) {
  __extends(TileSource2, _super);
  function TileSource2(options) {
    var _this = _super.call(this, {
      attributions: options.attributions,
      attributionsCollapsible: options.attributionsCollapsible,
      projection: options.projection,
      state: options.state,
      wrapX: options.wrapX,
      interpolate: options.interpolate
    }) || this;
    _this.on;
    _this.once;
    _this.un;
    _this.opaque_ = options.opaque !== void 0 ? options.opaque : false;
    _this.tilePixelRatio_ = options.tilePixelRatio !== void 0 ? options.tilePixelRatio : 1;
    _this.tileGrid = options.tileGrid !== void 0 ? options.tileGrid : null;
    var tileSize = [256, 256];
    if (_this.tileGrid) {
      toSize(_this.tileGrid.getTileSize(_this.tileGrid.getMinZoom()), tileSize);
    }
    _this.tileCache = new TileCache_default(options.cacheSize || 0);
    _this.tmpSize = [0, 0];
    _this.key_ = options.key || "";
    _this.tileOptions = {
      transition: options.transition,
      interpolate: options.interpolate
    };
    _this.zDirection = options.zDirection ? options.zDirection : 0;
    return _this;
  }
  TileSource2.prototype.canExpireCache = function() {
    return this.tileCache.canExpireCache();
  };
  TileSource2.prototype.expireCache = function(projection, usedTiles) {
    var tileCache = this.getTileCacheForProjection(projection);
    if (tileCache) {
      tileCache.expireCache(usedTiles);
    }
  };
  TileSource2.prototype.forEachLoadedTile = function(projection, z, tileRange, callback) {
    var tileCache = this.getTileCacheForProjection(projection);
    if (!tileCache) {
      return false;
    }
    var covered = true;
    var tile, tileCoordKey, loaded;
    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
        tileCoordKey = getKeyZXY(z, x, y);
        loaded = false;
        if (tileCache.containsKey(tileCoordKey)) {
          tile = tileCache.get(tileCoordKey);
          loaded = tile.getState() === TileState_default.LOADED;
          if (loaded) {
            loaded = callback(tile) !== false;
          }
        }
        if (!loaded) {
          covered = false;
        }
      }
    }
    return covered;
  };
  TileSource2.prototype.getGutterForProjection = function(projection) {
    return 0;
  };
  TileSource2.prototype.getKey = function() {
    return this.key_;
  };
  TileSource2.prototype.setKey = function(key) {
    if (this.key_ !== key) {
      this.key_ = key;
      this.changed();
    }
  };
  TileSource2.prototype.getOpaque = function(projection) {
    return this.opaque_;
  };
  TileSource2.prototype.getResolutions = function() {
    if (!this.tileGrid) {
      return null;
    }
    return this.tileGrid.getResolutions();
  };
  TileSource2.prototype.getTile = function(z, x, y, pixelRatio, projection) {
    return abstract();
  };
  TileSource2.prototype.getTileGrid = function() {
    return this.tileGrid;
  };
  TileSource2.prototype.getTileGridForProjection = function(projection) {
    if (!this.tileGrid) {
      return getForProjection(projection);
    } else {
      return this.tileGrid;
    }
  };
  TileSource2.prototype.getTileCacheForProjection = function(projection) {
    assert(equivalent(this.getProjection(), projection), 68);
    return this.tileCache;
  };
  TileSource2.prototype.getTilePixelRatio = function(pixelRatio) {
    return this.tilePixelRatio_;
  };
  TileSource2.prototype.getTilePixelSize = function(z, pixelRatio, projection) {
    var tileGrid = this.getTileGridForProjection(projection);
    var tilePixelRatio = this.getTilePixelRatio(pixelRatio);
    var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
    if (tilePixelRatio == 1) {
      return tileSize;
    } else {
      return scale(tileSize, tilePixelRatio, this.tmpSize);
    }
  };
  TileSource2.prototype.getTileCoordForTileUrlFunction = function(tileCoord, opt_projection) {
    var projection = opt_projection !== void 0 ? opt_projection : this.getProjection();
    var tileGrid = this.getTileGridForProjection(projection);
    if (this.getWrapX() && projection.isGlobal()) {
      tileCoord = wrapX(tileGrid, tileCoord, projection);
    }
    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;
  };
  TileSource2.prototype.clear = function() {
    this.tileCache.clear();
  };
  TileSource2.prototype.refresh = function() {
    this.clear();
    _super.prototype.refresh.call(this);
  };
  TileSource2.prototype.updateCacheSize = function(tileCount, projection) {
    var tileCache = this.getTileCacheForProjection(projection);
    if (tileCount > tileCache.highWaterMark) {
      tileCache.highWaterMark = tileCount;
    }
  };
  TileSource2.prototype.useTile = function(z, x, y, projection) {
  };
  return TileSource2;
}(Source_default);
var TileSourceEvent = function(_super) {
  __extends(TileSourceEvent2, _super);
  function TileSourceEvent2(type, tile) {
    var _this = _super.call(this, type) || this;
    _this.tile = tile;
    return _this;
  }
  return TileSourceEvent2;
}(Event_default);
var Tile_default = TileSource;

// node_modules/ol/source/UrlTile.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var UrlTile = function(_super) {
  __extends2(UrlTile2, _super);
  function UrlTile2(options) {
    var _this = _super.call(this, {
      attributions: options.attributions,
      cacheSize: options.cacheSize,
      opaque: options.opaque,
      projection: options.projection,
      state: options.state,
      tileGrid: options.tileGrid,
      tilePixelRatio: options.tilePixelRatio,
      wrapX: options.wrapX,
      transition: options.transition,
      interpolate: options.interpolate,
      key: options.key,
      attributionsCollapsible: options.attributionsCollapsible,
      zDirection: options.zDirection
    }) || this;
    _this.generateTileUrlFunction_ = _this.tileUrlFunction === UrlTile2.prototype.tileUrlFunction;
    _this.tileLoadFunction = options.tileLoadFunction;
    if (options.tileUrlFunction) {
      _this.tileUrlFunction = options.tileUrlFunction;
    }
    _this.urls = null;
    if (options.urls) {
      _this.setUrls(options.urls);
    } else if (options.url) {
      _this.setUrl(options.url);
    }
    _this.tileLoadingKeys_ = {};
    return _this;
  }
  UrlTile2.prototype.getTileLoadFunction = function() {
    return this.tileLoadFunction;
  };
  UrlTile2.prototype.getTileUrlFunction = function() {
    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;
  };
  UrlTile2.prototype.getUrls = function() {
    return this.urls;
  };
  UrlTile2.prototype.handleTileChange = function(event) {
    var tile = event.target;
    var uid = getUid(tile);
    var tileState = tile.getState();
    var type;
    if (tileState == TileState_default.LOADING) {
      this.tileLoadingKeys_[uid] = true;
      type = TileEventType_default.TILELOADSTART;
    } else if (uid in this.tileLoadingKeys_) {
      delete this.tileLoadingKeys_[uid];
      type = tileState == TileState_default.ERROR ? TileEventType_default.TILELOADERROR : tileState == TileState_default.LOADED ? TileEventType_default.TILELOADEND : void 0;
    }
    if (type != void 0) {
      this.dispatchEvent(new TileSourceEvent(type, tile));
    }
  };
  UrlTile2.prototype.setTileLoadFunction = function(tileLoadFunction) {
    this.tileCache.clear();
    this.tileLoadFunction = tileLoadFunction;
    this.changed();
  };
  UrlTile2.prototype.setTileUrlFunction = function(tileUrlFunction, key) {
    this.tileUrlFunction = tileUrlFunction;
    this.tileCache.pruneExceptNewestZ();
    if (typeof key !== "undefined") {
      this.setKey(key);
    } else {
      this.changed();
    }
  };
  UrlTile2.prototype.setUrl = function(url) {
    var urls = expandUrl(url);
    this.urls = urls;
    this.setUrls(urls);
  };
  UrlTile2.prototype.setUrls = function(urls) {
    this.urls = urls;
    var key = urls.join("\n");
    if (this.generateTileUrlFunction_) {
      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);
    } else {
      this.setKey(key);
    }
  };
  UrlTile2.prototype.tileUrlFunction = function(tileCoord, pixelRatio, projection) {
    return void 0;
  };
  UrlTile2.prototype.useTile = function(z, x, y) {
    var tileCoordKey = getKeyZXY(z, x, y);
    if (this.tileCache.containsKey(tileCoordKey)) {
      this.tileCache.get(tileCoordKey);
    }
  };
  return UrlTile2;
}(Tile_default);
var UrlTile_default = UrlTile;

export {
  getForProjection,
  createXYZ,
  createForProjection,
  extentFromProjection,
  createFromTemplates,
  createFromTileUrlFunctions,
  expandUrl,
  UrlTile_default
};
//# sourceMappingURL=chunk-XJHEPK5C.js.map
