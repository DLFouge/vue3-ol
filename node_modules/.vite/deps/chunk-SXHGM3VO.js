import {
  Triangulation_default,
  calculateSourceResolution,
  render
} from "./chunk-BULJNUPF.js";
import {
  Source_default
} from "./chunk-XAFSPYPF.js";
import {
  ImageBase_default
} from "./chunk-OWHWYXAG.js";
import {
  ENABLE_RASTER_REPROJECTION,
  ERROR_THRESHOLD
} from "./chunk-LJGIG2JF.js";
import {
  ImageState_default
} from "./chunk-R7HSF55M.js";
import {
  equivalent
} from "./chunk-SXHM4DXD.js";
import {
  EventType_default,
  Event_default,
  listen,
  unlistenByKey
} from "./chunk-POSIMZXH.js";
import {
  equals,
  getCenter,
  getHeight,
  getIntersection,
  getWidth
} from "./chunk-4LIZYYTK.js";
import {
  linearFindNearest
} from "./chunk-6G6NVFIA.js";
import {
  abstract
} from "./chunk-2WYEPIST.js";

// node_modules/ol/reproj/Image.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ReprojImage = function(_super) {
  __extends(ReprojImage2, _super);
  function ReprojImage2(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction, interpolate) {
    var _this = this;
    var maxSourceExtent = sourceProj.getExtent();
    var maxTargetExtent = targetProj.getExtent();
    var limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;
    var targetCenter = getCenter(limitedTargetExtent);
    var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);
    var errorThresholdInPixels = ERROR_THRESHOLD;
    var triangulation = new Triangulation_default(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);
    var sourceExtent = triangulation.calculateSourceExtent();
    var sourceImage = getImageFunction(sourceExtent, sourceResolution, pixelRatio);
    var state = sourceImage ? ImageState_default.IDLE : ImageState_default.EMPTY;
    var sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;
    _this = _super.call(this, targetExtent, targetResolution, sourcePixelRatio, state) || this;
    _this.targetProj_ = targetProj;
    _this.maxSourceExtent_ = maxSourceExtent;
    _this.triangulation_ = triangulation;
    _this.targetResolution_ = targetResolution;
    _this.targetExtent_ = targetExtent;
    _this.sourceImage_ = sourceImage;
    _this.sourcePixelRatio_ = sourcePixelRatio;
    _this.interpolate_ = interpolate;
    _this.canvas_ = null;
    _this.sourceListenerKey_ = null;
    return _this;
  }
  ReprojImage2.prototype.disposeInternal = function() {
    if (this.state == ImageState_default.LOADING) {
      this.unlistenSource_();
    }
    _super.prototype.disposeInternal.call(this);
  };
  ReprojImage2.prototype.getImage = function() {
    return this.canvas_;
  };
  ReprojImage2.prototype.getProjection = function() {
    return this.targetProj_;
  };
  ReprojImage2.prototype.reproject_ = function() {
    var sourceState = this.sourceImage_.getState();
    if (sourceState == ImageState_default.LOADED) {
      var width = getWidth(this.targetExtent_) / this.targetResolution_;
      var height = getHeight(this.targetExtent_) / this.targetResolution_;
      this.canvas_ = render(width, height, this.sourcePixelRatio_, this.sourceImage_.getResolution(), this.maxSourceExtent_, this.targetResolution_, this.targetExtent_, this.triangulation_, [
        {
          extent: this.sourceImage_.getExtent(),
          image: this.sourceImage_.getImage()
        }
      ], 0, void 0, this.interpolate_);
    }
    this.state = sourceState;
    this.changed();
  };
  ReprojImage2.prototype.load = function() {
    if (this.state == ImageState_default.IDLE) {
      this.state = ImageState_default.LOADING;
      this.changed();
      var sourceState = this.sourceImage_.getState();
      if (sourceState == ImageState_default.LOADED || sourceState == ImageState_default.ERROR) {
        this.reproject_();
      } else {
        this.sourceListenerKey_ = listen(this.sourceImage_, EventType_default.CHANGE, function(e) {
          var sourceState2 = this.sourceImage_.getState();
          if (sourceState2 == ImageState_default.LOADED || sourceState2 == ImageState_default.ERROR) {
            this.unlistenSource_();
            this.reproject_();
          }
        }, this);
        this.sourceImage_.load();
      }
    }
  };
  ReprojImage2.prototype.unlistenSource_ = function() {
    unlistenByKey(this.sourceListenerKey_);
    this.sourceListenerKey_ = null;
  };
  return ReprojImage2;
}(ImageBase_default);
var Image_default = ReprojImage;

// node_modules/ol/source/Image.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ImageSourceEventType = {
  IMAGELOADSTART: "imageloadstart",
  IMAGELOADEND: "imageloadend",
  IMAGELOADERROR: "imageloaderror"
};
var ImageSourceEvent = function(_super) {
  __extends2(ImageSourceEvent2, _super);
  function ImageSourceEvent2(type, image) {
    var _this = _super.call(this, type) || this;
    _this.image = image;
    return _this;
  }
  return ImageSourceEvent2;
}(Event_default);
var ImageSource = function(_super) {
  __extends2(ImageSource2, _super);
  function ImageSource2(options) {
    var _this = this;
    var interpolate = options.imageSmoothing !== void 0 ? options.imageSmoothing : true;
    if (options.interpolate !== void 0) {
      interpolate = options.interpolate;
    }
    _this = _super.call(this, {
      attributions: options.attributions,
      projection: options.projection,
      state: options.state,
      interpolate
    }) || this;
    _this.on;
    _this.once;
    _this.un;
    _this.resolutions_ = options.resolutions !== void 0 ? options.resolutions : null;
    _this.reprojectedImage_ = null;
    _this.reprojectedRevision_ = 0;
    return _this;
  }
  ImageSource2.prototype.getResolutions = function() {
    return this.resolutions_;
  };
  ImageSource2.prototype.findNearestResolution = function(resolution) {
    if (this.resolutions_) {
      var idx = linearFindNearest(this.resolutions_, resolution, 0);
      resolution = this.resolutions_[idx];
    }
    return resolution;
  };
  ImageSource2.prototype.getImage = function(extent, resolution, pixelRatio, projection) {
    var sourceProjection = this.getProjection();
    if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {
      if (sourceProjection) {
        projection = sourceProjection;
      }
      return this.getImageInternal(extent, resolution, pixelRatio, projection);
    } else {
      if (this.reprojectedImage_) {
        if (this.reprojectedRevision_ == this.getRevision() && equivalent(this.reprojectedImage_.getProjection(), projection) && this.reprojectedImage_.getResolution() == resolution && equals(this.reprojectedImage_.getExtent(), extent)) {
          return this.reprojectedImage_;
        }
        this.reprojectedImage_.dispose();
        this.reprojectedImage_ = null;
      }
      this.reprojectedImage_ = new Image_default(sourceProjection, projection, extent, resolution, pixelRatio, function(extent2, resolution2, pixelRatio2) {
        return this.getImageInternal(extent2, resolution2, pixelRatio2, sourceProjection);
      }.bind(this), this.getInterpolate());
      this.reprojectedRevision_ = this.getRevision();
      return this.reprojectedImage_;
    }
  };
  ImageSource2.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {
    return abstract();
  };
  ImageSource2.prototype.handleImageChange = function(event) {
    var image = event.target;
    var type;
    switch (image.getState()) {
      case ImageState_default.LOADING:
        this.loading = true;
        type = ImageSourceEventType.IMAGELOADSTART;
        break;
      case ImageState_default.LOADED:
        this.loading = false;
        type = ImageSourceEventType.IMAGELOADEND;
        break;
      case ImageState_default.ERROR:
        this.loading = false;
        type = ImageSourceEventType.IMAGELOADERROR;
        break;
      default:
        return;
    }
    if (this.hasListener(type)) {
      this.dispatchEvent(new ImageSourceEvent(type, image));
    }
  };
  return ImageSource2;
}(Source_default);
function defaultImageLoadFunction(image, src) {
  image.getImage().src = src;
}
var Image_default2 = ImageSource;

export {
  defaultImageLoadFunction,
  Image_default2 as Image_default
};
//# sourceMappingURL=chunk-SXHGM3VO.js.map
