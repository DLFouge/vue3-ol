import {
  Immediate_default,
  getSquaredTolerance
} from "./chunk-RBDOL7K2.js";
import {
  getTransformFromProjections,
  getUserProjection
} from "./chunk-SXHM4DXD.js";
import {
  apply,
  create,
  multiply,
  scale
} from "./chunk-HQZSRF55.js";
import {
  DEVICE_PIXEL_RATIO
} from "./chunk-22ZMPUOM.js";

// node_modules/ol/render.js
function toContext(context, opt_options) {
  var canvas = context.canvas;
  var options = opt_options ? opt_options : {};
  var pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;
  var size = options.size;
  if (size) {
    canvas.width = size[0] * pixelRatio;
    canvas.height = size[1] * pixelRatio;
    canvas.style.width = size[0] + "px";
    canvas.style.height = size[1] + "px";
  }
  var extent = [0, 0, canvas.width, canvas.height];
  var transform = scale(create(), pixelRatio, pixelRatio);
  return new Immediate_default(context, pixelRatio, extent, transform, 0);
}
function getVectorContext(event) {
  if (!(event.context instanceof CanvasRenderingContext2D)) {
    throw new Error("Only works for render events from Canvas 2D layers");
  }
  var canvasPixelRatio = event.inversePixelTransform[0];
  var frameState = event.frameState;
  var transform = multiply(event.inversePixelTransform.slice(), frameState.coordinateToPixelTransform);
  var squaredTolerance = getSquaredTolerance(frameState.viewState.resolution, canvasPixelRatio);
  var userTransform;
  var userProjection = getUserProjection();
  if (userProjection) {
    userTransform = getTransformFromProjections(userProjection, frameState.viewState.projection);
  }
  return new Immediate_default(event.context, canvasPixelRatio, frameState.extent, transform, frameState.viewState.rotation, squaredTolerance, userTransform);
}
function getRenderPixel(event, pixel) {
  return apply(event.inversePixelTransform, pixel.slice(0));
}

export {
  toContext,
  getVectorContext,
  getRenderPixel
};
//# sourceMappingURL=chunk-X3MHNUIL.js.map
