{
  "version": 3,
  "sources": ["../../ol/src/source/ImageCanvas.js", "../../ol-ext/source/GeoImage.js", "dep:ol-ext_source_GeoImage"],
  "sourcesContent": [null, "/*\tCopyright (c) 2015 Jean-Marc VIGLINO, \r\n  released under the CeCILL-B license (French BSD license)\r\n  (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).\r\n  \r\n  ol_source_GeoImage is a layer source with georeferencement to place it on a map.\r\n*/\r\n/** @typedef {Object} GeoImageOptions\r\n * @property {url} url url of the static image\r\n * @property {image} image the static image, if not provided, use url to load an image\r\n * @property {ol.Coordinate} imageCenter coordinate of the center of the image\r\n * @property {ol.Size|number} imageScale [scalex, scaley] of the image\r\n * @property {number} imageRotate angle of the image in radian, default 0\r\n * @property {ol.Extent} imageCrop of the image to be show (in the image) default: [0,0,imageWidth,imageHeight]\r\n * @property {Array.<ol.Coordinate>} imageMask linestring to mask the image on the map\r\n */\r\n\r\nimport ol_ext_inherits from '../util/ext'\r\nimport ol_source_ImageCanvas from 'ol/source/ImageCanvas'\r\nimport ol_geom_Polygon from 'ol/geom/Polygon'\r\nimport {boundingExtent as ol_extent_boundingExtent} from 'ol/extent'\r\nimport {fromExtent as ol_geom_Polygon_fromExtent} from 'ol/geom/Polygon'\r\n\r\n/** Layer source with georeferencement to place it on a map\r\n * @constructor \r\n * @extends {ol_source_ImageCanvas}\r\n * @param {GeoImageOptions} options\r\n */\r\nvar ol_source_GeoImage = function(opt_options) {\r\n  var options = { \r\n    attributions: opt_options.attributions,\r\n    logo: opt_options.logo,\r\n    projection: opt_options.projection\r\n  };\r\n  \r\n  // options.projection = opt_options.projection;\r\n\r\n  // Load Image\r\n  this._image = (opt_options.image ? opt_options.image : new Image );\r\n  this._image.crossOrigin = opt_options.crossOrigin; // 'anonymous';\r\n  // Show image on load\r\n  var self = this;\r\n  this._image.onload = function() {\r\n    self.setCrop (self.crop);\r\n    self.changed();\r\n  }\r\n  if (!opt_options.image) this._image.src = opt_options.url;\r\n\r\n  // Draw image on canvas\r\n  options.canvasFunction = this.calculateImage;\r\n\r\n  ol_source_ImageCanvas.call (this, options);\t\r\n  \r\n  // Coordinate of the image center \r\n  this.center = opt_options.imageCenter;\r\n  // Image scale \r\n  this.setScale(opt_options.imageScale);\r\n  // Rotation of the image\r\n  this.rotate = opt_options.imageRotate ? opt_options.imageRotate : 0;\r\n  // Crop of the image\r\n  this.crop = opt_options.imageCrop;\r\n  // Mask of the image\r\n  this.mask = opt_options.imageMask;\r\n  // Crop\r\n  this.setCrop (this.crop);\r\n\r\n  // Calculate extent on change\r\n  this.on('change', function() {\r\n    this.set('extent', this.calculateExtent());\r\n  }.bind(this));\r\n};\r\nol_ext_inherits(ol_source_GeoImage, ol_source_ImageCanvas);\r\n\r\n/** calculate image at extent / resolution\r\n * @param {ol/extent/Extent} extent\r\n * @param {number} resolution\r\n * @param {number} pixelRatio\r\n * @param {ol/size/Size} size\r\n * @return {HTMLCanvasElement}\r\n */\r\nol_source_GeoImage.prototype.calculateImage = function(extent, resolution, pixelRatio, size) {\r\n  if (!this.center) return;\r\n  var canvas = document.createElement('canvas');\r\n  canvas.width = size[0];\r\n  canvas.height = size[1];\r\n  var ctx = canvas.getContext('2d');\r\n\r\n  if (!this._imageSize) return canvas;\r\n  // transform coords to pixel\r\n  function tr(xy) {\r\n    return [\r\n      (xy[0]-extent[0])/(extent[2]-extent[0]) * size[0],\r\n      (xy[1]-extent[3])/(extent[1]-extent[3]) * size[1]\r\n    ];\r\n  }\r\n  // Clipping mask\r\n  if (this.mask) {\r\n    ctx.beginPath();\r\n    var p = tr(this.mask[0]);\r\n    ctx.moveTo(p[0],p[1]);\r\n    for (var i=1; i<this.mask.length; i++) {\r\n      p = tr(this.mask[i]);\r\n      ctx.lineTo(p[0],p[1]);\r\n    }\r\n    ctx.clip();\r\n  }\r\n  \r\n  // Draw\r\n  var pixel = tr(this.center);\r\n  var dx = (this._image.naturalWidth/2 - this.crop[0]) *this.scale[0] /resolution *pixelRatio;\r\n  var dy = (this._image.naturalHeight/2 - this.crop[1]) *this.scale[1] /resolution *pixelRatio;\r\n  var sx = this._imageSize[0]*this.scale[0]/resolution *pixelRatio;\r\n  var sy = this._imageSize[1]*this.scale[1]/resolution *pixelRatio;\r\n\r\n  ctx.translate(pixel[0],pixel[1]);\r\n  if (this.rotate) ctx.rotate(this.rotate);\r\n  ctx.drawImage(this._image, this.crop[0], this.crop[1], this._imageSize[0], this._imageSize[1], -dx, -dy, sx,sy);\r\n  return canvas;\r\n}\r\n\r\n/**\r\n * Get coordinate of the image center.\r\n * @return {ol.Coordinate} coordinate of the image center.\r\n * @api stable\r\n */\r\nol_source_GeoImage.prototype.getCenter = function() {\r\n  return this.center;\r\n}\r\n/**\r\n * Set coordinate of the image center.\r\n * @param {ol.Coordinate} coordinate of the image center.\r\n * @api stable\r\n */\r\nol_source_GeoImage.prototype.setCenter = function(center) {\r\n  this.center = center;\r\n  this.changed();\r\n}\r\n\r\n/**\r\n * Get image scale.\r\n * @return {ol.size} image scale (along x and y axis).\r\n * @api stable\r\n */\r\nol_source_GeoImage.prototype.getScale = function() {\r\n  return this.scale;\r\n}\r\n/**\r\n * Set image scale.\r\n * @param {ol.size|Number} image scale (along x and y axis or both).\r\n * @api stable\r\n */\r\nol_source_GeoImage.prototype.setScale = function(scale) {\r\n  switch (typeof(scale)) {\r\n    case 'number':\r\n      scale = [scale,scale];\r\n      break;\r\n    case 'object': \r\n      if (scale.length != 2) return;\r\n      break;\r\n    default: return;\r\n  }\r\n  this.scale = scale;\r\n  this.changed();\r\n};\r\n\r\n/**\r\n * Get image rotation.\r\n * @return {Number} rotation in degre.\r\n * @api stable\r\n */\r\nol_source_GeoImage.prototype.getRotation = function() {\r\n  return this.rotate;\r\n};\r\n/**\r\n * Set image rotation.\r\n * @param {Number} rotation in radian.\r\n * @api stable\r\n */\r\nol_source_GeoImage.prototype.setRotation = function(angle) {\r\n  this.rotate = angle;\r\n  this.changed();\r\n};\r\n\r\n/**\r\n * Get the image.\r\n * @api stable\r\n */\r\nol_source_GeoImage.prototype.getGeoImage = function() {\r\n  return this._image;\r\n};\r\n\r\n/**\r\n * Get image crop extent.\r\n * @return {ol.extent} image crop extent.\r\n * @api stable\r\n */\r\nol_source_GeoImage.prototype.getCrop = function() {\r\n  return this.crop;\r\n};\r\n\r\n\r\n/**\r\n * Set image mask.\r\n * @param {ol.geom.LineString} coords of the mask\r\n * @api stable\r\n */\r\nol_source_GeoImage.prototype.setMask = function(mask) {\r\n  this.mask = mask;\r\n  this.changed();\r\n};\r\n\r\n/**\r\n * Get image mask.\r\n * @return {ol.geom.LineString} coords of the mask\r\n * @api stable\r\n */\r\nol_source_GeoImage.prototype.getMask = function() {\r\n  return this.mask;\r\n};\r\n\r\n/**\r\n * Set image crop extent.\r\n * @param {ol.extent|Number} image crop extent or a number to crop from original size.\r\n * @api stable\r\n */\r\nol_source_GeoImage.prototype.setCrop = function(crop) {\r\n  // Image not loaded => get it latter\r\n  if (!this._image.naturalWidth) {\r\n    this.crop = crop;\r\n    return;\r\n  }\r\n  if (crop) {\r\n    switch (typeof(crop)) {\r\n      case 'number':\r\n        crop = [crop,crop,this._image.naturalWidth-crop,this._image.naturalHeight-crop];\r\n        break;\r\n      case 'object': \r\n        if (crop.length != 4) return;\r\n        break;\r\n      default: return;\r\n    }\r\n    crop = ol_extent_boundingExtent([ [crop[0],crop[1]], [crop[2],crop[3]] ]);\r\n    this.crop = [ Math.max(0,crop[0]), Math.max(0,crop[1]), Math.min(this._image.naturalWidth,crop[2]), Math.min(this._image.naturalHeight,crop[3]) ];\r\n  }\r\n  else this.crop = [0,0, this._image.naturalWidth,this._image.naturalHeight];\r\n  if (this.crop[2]<=this.crop[0]) this.crop[2] = this.crop[0]+1;\r\n  if (this.crop[3]<=this.crop[1]) this.crop[3] = this.crop[1]+1;\r\n  this._imageSize = [ this.crop[2]-this.crop[0], this.crop[3]-this.crop[1] ];\r\n  this.changed();\r\n};\r\n\r\n/** Get the extent of the source.\r\n * @param {module:ol/extent~Extent} extent If provided, no new extent will be created. Instead, that extent's coordinates will be overwritten.\r\n * @return {ol.extent}\r\n */\r\nol_source_GeoImage.prototype.getExtent = function(opt_extent) {\r\n  var ext = this.get('extent');\r\n  if (!ext) ext = this.calculateExtent();\r\n  if (opt_extent) {\r\n    for (var i=0; i<opt_extent.length; i++) {\r\n      opt_extent[i] = ext[i];\r\n    }\r\n  }\r\n  return ext;\r\n};\r\n\r\n/** Calculate the extent of the source image.\r\n * @param {boolean} usemask return the mask extent, default return the image extent\r\n * @return {ol.extent}\r\n */\r\nol_source_GeoImage.prototype.calculateExtent = function(usemask) {\r\n  var polygon;\r\n  if (usemask!==false && this.getMask()) {\r\n    polygon = new ol_geom_Polygon([this.getMask()])\r\n  } else {\r\n    var center = this.getCenter();\r\n    var scale = this.getScale();\r\n    var width = this.getGeoImage().width * scale[0];\r\n    var height = this.getGeoImage().height * scale[1];\r\n    var extent = ol_extent_boundingExtent([\r\n      [ center[0]-width/2, center[1]-height/2 ],\r\n      [ center[0]+width/2, center[1]+height/2 ]\r\n    ]);\r\n    polygon = ol_geom_Polygon_fromExtent(extent);\r\n    polygon.rotate(-this.getRotation(), center);\r\n  }\r\n  var ext = polygon.getExtent();\r\n  return ext;\r\n};\r\n\r\nexport default ol_source_GeoImage\r\n", "import d from \"./node_modules/ol-ext/source/GeoImage.js\";export default d;"],
  "mappings": "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",
  "names": []
}
