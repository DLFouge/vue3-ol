import {
  TileGrid_default
} from "./chunk-IQVIUSXF.js";
import {
  get
} from "./chunk-SXHM4DXD.js";
import {
  find
} from "./chunk-6G6NVFIA.js";

// node_modules/ol/tilegrid/WMTS.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var WMTSTileGrid = function(_super) {
  __extends(WMTSTileGrid2, _super);
  function WMTSTileGrid2(options) {
    var _this = _super.call(this, {
      extent: options.extent,
      origin: options.origin,
      origins: options.origins,
      resolutions: options.resolutions,
      tileSize: options.tileSize,
      tileSizes: options.tileSizes,
      sizes: options.sizes
    }) || this;
    _this.matrixIds_ = options.matrixIds;
    return _this;
  }
  WMTSTileGrid2.prototype.getMatrixId = function(z) {
    return this.matrixIds_[z];
  };
  WMTSTileGrid2.prototype.getMatrixIds = function() {
    return this.matrixIds_;
  };
  return WMTSTileGrid2;
}(TileGrid_default);
var WMTS_default = WMTSTileGrid;
function createFromCapabilitiesMatrixSet(matrixSet, opt_extent, opt_matrixLimits) {
  var resolutions = [];
  var matrixIds = [];
  var origins = [];
  var tileSizes = [];
  var sizes = [];
  var matrixLimits = opt_matrixLimits !== void 0 ? opt_matrixLimits : [];
  var supportedCRSPropName = "SupportedCRS";
  var matrixIdsPropName = "TileMatrix";
  var identifierPropName = "Identifier";
  var scaleDenominatorPropName = "ScaleDenominator";
  var topLeftCornerPropName = "TopLeftCorner";
  var tileWidthPropName = "TileWidth";
  var tileHeightPropName = "TileHeight";
  var code = matrixSet[supportedCRSPropName];
  var projection = get(code);
  var metersPerUnit = projection.getMetersPerUnit();
  var switchOriginXY = projection.getAxisOrientation().substr(0, 2) == "ne";
  matrixSet[matrixIdsPropName].sort(function(a, b) {
    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];
  });
  matrixSet[matrixIdsPropName].forEach(function(elt) {
    var matrixAvailable;
    if (matrixLimits.length > 0) {
      matrixAvailable = find(matrixLimits, function(elt_ml) {
        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {
          return true;
        }
        if (elt[identifierPropName].indexOf(":") === -1) {
          return matrixSet[identifierPropName] + ":" + elt[identifierPropName] === elt_ml[matrixIdsPropName];
        }
        return false;
      });
    } else {
      matrixAvailable = true;
    }
    if (matrixAvailable) {
      matrixIds.push(elt[identifierPropName]);
      var resolution = elt[scaleDenominatorPropName] * 28e-5 / metersPerUnit;
      var tileWidth = elt[tileWidthPropName];
      var tileHeight = elt[tileHeightPropName];
      if (switchOriginXY) {
        origins.push([
          elt[topLeftCornerPropName][1],
          elt[topLeftCornerPropName][0]
        ]);
      } else {
        origins.push(elt[topLeftCornerPropName]);
      }
      resolutions.push(resolution);
      tileSizes.push(tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight]);
      sizes.push([elt["MatrixWidth"], elt["MatrixHeight"]]);
    }
  });
  return new WMTSTileGrid({
    extent: opt_extent,
    origins,
    resolutions,
    matrixIds,
    tileSizes,
    sizes
  });
}

export {
  WMTS_default,
  createFromCapabilitiesMatrixSet
};
//# sourceMappingURL=chunk-5RAQGQQ5.js.map
